
	function initColisionnScene() {
                var cubeGeometry = new THREE.CubeGeometry(75, 75, 75, 1, 1, 1);
                var wireMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: false});
                MovingCube = new THREE.Mesh(cubeGeometry, wireMaterial);
                MovingCube.position.set(0, 25, 0);
                scene.add(MovingCube);
            }


                // collision detection:
                //   determines if any of the rays from the cube's origin to each vertex
                //		intersects any face of a mesh in the array of target meshes
                //   for increased collision accuracy, add more vertices to the cube;
                //		for example, new THREE.CubeGeometry( 64, 64, 64, 8, 8, 8, wireMaterial )
                //   HOWEVER: when the origin of the ray is within the target mesh, collisions do not occur
                var originPoint = MovingCube.position.clone();


                for (var vertexIndex = 0; vertexIndex < MovingCube.geometry.vertices.length; vertexIndex++)
                {
                    var localVertex = MovingCube.geometry.vertices[vertexIndex].clone();
                    var globalVertex = localVertex.applyMatrix4(MovingCube.matrix);
                    var directionVector = globalVertex.sub(MovingCube.position);

                    var ray = new THREE.Raycaster(originPoint, directionVector.clone().normalize());
                    var collisionResults = ray.intersectObjects(collidableMeshList, true);
                    if (collisionResults.length > 0 && collisionResults[0].distance < directionVector.length()){
                        //console.log(collisionResults[0].object.name);
                        
                        if(spawnParticles){
                            options.position.x = collisionResults[0].object.position.x;
                            options.position.z = collisionResults[0].object.position.z;
                            options.position.y = 20;
                        }
                    }
		}