<html>

  </style>

</head>

 <body>
  

  <script>
    var camera, tick = 0,
      scene, renderer, clock = new x3d.Clock(true),
      controls, container, gui = new dat.GUI(),
      options, spawnerOptions, particleSystem;

    init();
    animate();

    function init() {


      container = document.createElement('div');
      document.body.appendChild(container);

      camera = new x3d.PerspectiveCamera(28, window.innerWidth / window.innerHeight, 1, 10000);
      camera.position.z = 100;

      scene = new x3d.Scene();

      //
      particleSystem = new x3d.GPUParticleSystem({
        maxParticles: 250
      });
      scene.add( particleSystem);


      //
      options = {
        position: new x3d.Vector3(),
        positionRandomness: .3,
        velocity: new x3d.Vector3(),
        velocityRandomness: .5,
        color: 0xaa88ff,
        colorRandomness: .2,
        turbulence: .5,
        lifetime: 2,
        size: 5,
        sizeRandomness: 1
      };

      spawnerOptions = {
        spawnRate: 150,
        horizontalSpeed: 1.5,
        verticalSpeed: 1.33,
        timeScale: 1
      }

      gui.add(options, "velocityRandomness", 0, 3);
      gui.add(options, "positionRandomness", 0, 3);
      gui.add(options, "size", 1, 20);
      gui.add(options, "sizeRandomness", 0, 25);
      gui.add(options, "colorRandomness", 0, 1);
      gui.add(options, "lifetime", .1, 10);
      gui.add(options, "turbulence", 0, 1);

      gui.add(spawnerOptions, "spawnRate", 10, 300);
      gui.add(spawnerOptions, "timeScale", -1, 1);

      renderer = new x3d.Renderer(); //muss noch geändert werden
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      container.appendChild(renderer.domElement);

      // setup controls
      controls = new x3d.TrackballControls(camera, renderer.domElement);
      controls.rotateSpeed = 5.0;
      controls.zoomSpeed = 2.2;
      controls.panSpeed = 1;
      controls.dynamicDampingFactor = 0.3;

      window.addEventListener('resize', onWindowResize, false);

    }

    function onWindowResize() {

      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize(window.innerWidth, window.innerHeight);

    }

    function animate() {

      requestAnimationFrame(animate);

      controls.update();

      var delta = clock.getDelta() * spawnerOptions.timeScale;
      tick += delta;

      if (tick < 0) tick = 0;

      if (delta > 0) {
        options.position.x = Math.sin(tick * spawnerOptions.horizontalSpeed) * 20;
        options.position.y = Math.sin(tick * spawnerOptions.verticalSpeed) * 10;
        options.position.z = Math.sin(tick * spawnerOptions.horizontalSpeed + spawnerOptions.verticalSpeed) * 5;

        for (var x = 0; x < spawnerOptions.spawnRate * delta; x++) {
         
          particleSystem.spawnParticle(options);
        }
      }

      particleSystem.update(tick);

      render();

    }

    function render() {

      renderer.render(scene, camera);

    }
  </script>
</body>

</html>
